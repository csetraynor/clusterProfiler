{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Statistical analysis and visualization of functional profiles for genes and gene clusters\"\nauthor: \"\\\\\n\n\tGuangchuang Yu \\\\\n\n        School of Public Health, The University of Hong Kong\"\ndate: \"`r Sys.Date()`\"\nbibliography: clusterProfiler.bib\nbiblio-style: apalike\noutput:\n  prettydoc::html_pretty:\n    toc: true\n    theme: cayman\n    highlight: github\n  pdf_document:\n    toc: true\nvignette: >\n  %\\VignetteIndexEntry{Statistical analysis and visualization of functional profiles for genes and gene clusters}\n  %\\VignetteEngine{knitr::rmarkdown}\n  %\\usepackage[utf8]{inputenc}\n  %\\VignetteEncoding{UTF-8}\n---\n\n```{r style, echo=FALSE, results=\"asis\", message=FALSE}\nknitr::opts_chunk$set(tidy = FALSE,\n                      warning = FALSE,\n                      message = FALSE)\n```\n\n```{r echo=FALSE, results='hide', message=FALSE}\nlibrary(DOSE)\nlibrary(GO.db)\nlibrary(org.Hs.eg.db)\nlibrary(GSEABase)\nlibrary(clusterProfiler)\n```\n\n# Abstract\n\n[clusterProfiler](https://www.bioconductor.org/packages/clusterProfiler) implements methods to analyze and visualize functional profiles of genomic coordinates (supported by [ChIPseeker](https://www.bioconductor.org/packages/ChIPseeker)), gene and gene clusters.\n\n## Supported Analysis\n\n+ Over-Representation Analysis\n+ Gene Set Enrichment Analysis\n+ Biological theme comparison\n\n## Supported ontologies/pathways\n\n+ Disease Ontology (via [DOSE](https://www.bioconductor.org/packages/DOSE))\n+ [Network of Cancer Gene](http://ncg.kcl.ac.uk/) (via [DOSE](https://www.bioconductor.org/packages/DOSE))\n+ [DisGeNET](http://www.disgenet.org/web/DisGeNET/menu/home) (via [DOSE](https://www.bioconductor.org/packages/DOSE))\n+ Gene Ontology (supports many species with GO annotation query online via [AnnotationHub](https://bioconductor.org/packages/AnnotationHub/))\n+ KEGG Pathway and Module with latest online data (supports more than 4000 species listed in <http://www.genome.jp/kegg/catalog/org_list.html>)\n+ Reactome Pathway (via [ReactomePA](https://www.bioconductor.org/packages/ReactomePA))\n+ DAVID (via [RDAVIDWebService](https://www.bioconductor.org/packages/RDAVIDWebService))\n+ [Molecular Signatures Database](http://software.broadinstitute.org/gsea/msigdb)\n\t* hallmark gene sets\n\t* positional gene sets\n\t* curated gene sets\n\t* motif gene sets\n\t* computational gene sets\n\t* GO gene sets\n\t* oncogenic signatures\n\t* immunologic signatures\n+ Other Annotations\n\t* from other sources (e.g. [DisGeNET](http://www.disgenet.org/web/DisGeNET/menu/home) as [an example](https://guangchuangyu.github.io/2015/05/use-clusterprofiler-as-an-universal-enrichment-analysis-tool/))\n\t* user's annotation\n\t* customized ontology\n\t* and many others\n\n## Visualization\n\n+ barplot\n+ cnetplot\n+ dotplot\n+ emapplot\n+ gseaplot\n+ goplot\n+ upsetplot\n\n\n# Citation\n\nIf you use [clusterProfiler](https://www.bioconductor.org/packages/clusterProfiler) in published research, please cite:\n\n\n__*G Yu*__, LG Wang, Y Han, QY He. clusterProfiler: an R package for comparing biological themes among gene clusters. **_OMICS: A Journal of Integrative Biology_** 2012, 16(5):284-287. doi:[10.1089/omi.2011.0118](http://dx.doi.org/10.1089/omi.2011.0118)\n\n\n# Introduction\n\nIn recently years, high-throughput experimental techniques such as\nmicroarray, RNA-Seq and mass spectrometry can detect cellular\nmolecules at systems-level. These kinds of analyses generate huge\nquantitaties of data, which need to be given a biological\ninterpretation. A commonly used approach is via clustering in the gene\ndimension for grouping different genes based on their similarities[@yu2010].\n\nTo search for shared functions among genes, a common way is to\nincorporate the biological knowledge, such as Gene Ontology (GO) and\nKyoto Encyclopedia of Genes and Genomes (KEGG), for identifying\npredominant biological themes of a collection of genes.\n\nAfter clustering analysis, researchers not only want to determine\nwhether there is a common theme of a particular gene cluster, but also\nto compare the biological themes among gene clusters. The manual step\nto choose interesting clusters followed by enrichment analysis on each\nselected cluster is slow and tedious. To bridge this gap, we designed\n[clusterProfiler](https://www.bioconductor.org/packages/clusterProfiler)[@yu2012], for comparing and visualizing functional\nprofiles among gene clusters.\n\n# `bitr`: Biological Id TranslatoR\n\n[clusterProfiler](https://www.bioconductor.org/packages/clusterProfiler) provides `bitr` and `bitr_kegg` for converting ID types. Both `bitr` and `bitr_kegg` support many species including model and many non-model organisms.\n\n```{r}\nx <- c(\"GPX3\",  \"GLRX\",   \"LBP\",   \"CRYAB\", \"DEFB1\", \"HCLS1\",   \"SOD2\",   \"HSPA2\",\n       \"ORM1\",  \"IGFBP1\", \"PTHLH\", \"GPC3\",  \"IGFBP3\",\"TOB1\",    \"MITF\",   \"NDRG1\",\n       \"NR1H4\", \"FGFR3\",  \"PVR\",   \"IL6\",   \"PTPRM\", \"ERBB2\",   \"NID2\",   \"LAMB1\",\n       \"COMP\",  \"PLS3\",   \"MCAM\",  \"SPP1\",  \"LAMC1\", \"COL4A2\",  \"COL4A1\", \"MYOC\",\n       \"ANXA4\", \"TFPI2\",  \"CST6\",  \"SLPI\",  \"TIMP2\", \"CPM\",     \"GGT1\",   \"NNMT\",\n       \"MAL\",   \"EEF1A2\", \"HGD\",   \"TCN2\",  \"CDA\",   \"PCCA\",    \"CRYM\",   \"PDXK\",\n       \"STC1\",  \"WARS\",  \"HMOX1\", \"FXYD2\", \"RBP4\",   \"SLC6A12\", \"KDELR3\", \"ITM2B\")\neg = bitr(x, fromType=\"SYMBOL\", toType=\"ENTREZID\", OrgDb=\"org.Hs.eg.db\")\nhead(eg)\n```\n\nUser should provides an annotation package, both _fromType_ and _toType_ can accept any types that supported.\n\nUser can use _keytypes_ to list all supporting types.\n\n```{r}\nlibrary(org.Hs.eg.db)\nkeytypes(org.Hs.eg.db)\n```\n\nWe can translate from one type to other types.\n```{r}\nids <- bitr(x, fromType=\"SYMBOL\", toType=c(\"UNIPROT\", \"ENSEMBL\"), OrgDb=\"org.Hs.eg.db\")\nhead(ids)\n```\n\nFor GO analysis, user don't need to convert ID, all ID type provided by `OrgDb` can be used in `groupGO`, `enrichGO` and `gseGO` by specifying `keyType` parameter.\n\n## `bitr_kegg`: converting biological IDs using KEGG API\n\n\n```{r}\ndata(gcSample)\nhg <- gcSample[[1]]\nhead(hg)\n\neg2np <- bitr_kegg(hg, fromType='kegg', toType='ncbi-proteinid', organism='hsa')\nhead(eg2np)\n```\n\nThe ID type (both `fromType` & `toType`) should be one of 'kegg', 'ncbi-geneid', 'ncbi-proteinid' or 'uniprot'. The 'kegg' is the primary ID used in KEGG database. The data source of KEGG was from NCBI. A rule of thumb for the 'kegg' ID is `entrezgene` ID for eukaryote species and `Locus` ID for prokaryotes.\n\nMany prokaryote species don't have entrezgene ID available. For example we can check the gene information of `ece:Z5100` in <http://www.genome.jp/dbget-bin/www_bget?ece:Z5100>, which have `NCBI-ProteinID` and `UnitProt` links in the `Other DBs` Entry, but not `NCBI-GeneID`.\n\n\nIf we try to convert `Z5100` to `ncbi-geneid`, `bitr_kegg` will throw error of `ncbi-geneid is not supported`.\n\n```{r eval=FALSE}\nbitr_kegg(\"Z5100\", fromType=\"kegg\", toType='ncbi-geneid', organism='ece')\n```\n\n```\n## Error in KEGG_convert(fromType, toType, organism) :\n## ncbi-geneid is not supported for ece ...\n```\n\nWe can of course convert it to `ncbi-proteinid` and `uniprot`:\n\n```{r}\nbitr_kegg(\"Z5100\", fromType=\"kegg\", toType='ncbi-proteinid', organism='ece')\nbitr_kegg(\"Z5100\", fromType=\"kegg\", toType='uniprot', organism='ece')\n```\n\n\n# GO Analysis\n\n## Supported organisms\n\nGO analyses (`groupGO()`, `enrichGO()` and `gseGO()`) support organisms that have an `OrgDb` object available.\n\nBioconductor have already provide `OrgDb` for about [20 species](http://bioconductor.org/packages/release/BiocViews.html#___OrgDb). User can query `OrgDb` online by [AnnotationHub](https://www.bioconductor.org/packages/AnnotationHub) or build their own by [AnnotationForge](https://www.bioconductor.org/packages/AnnotationForge). An example can be found in the [vignette](https://bioconductor.org/packages/devel/bioc/vignettes/GOSemSim/inst/doc/GOSemSim.html#supported-organisms) of [GOSemSim](https://www.bioconductor.org/packages/GOSemSim).\n\nIf user have GO annotation data (in data.frame format with first column of gene ID and second column of GO ID), they can use `enricher()` and `gseGO()` functions to perform over-representation test and gene set enrichment analysis.\n\nIf genes are annotated by direction annotation, it should also annotated by its ancestor GO nodes (indirect annation). If user only has direct annotation, they can pass their annotation to `buildGOmap` function, which will infer indirection annotation and generate a `data.frame` that suitable for both `enricher()` and `gseGO()`.\n\n## GO classification\n\nIn [clusterProfiler](https://www.bioconductor.org/packages/clusterProfiler), `groupGO` is designed for gene classification based on GO distribution at a specific level. Here we use dataset `geneList` provided by [DOSE](https://www.bioconductor.org/packages/DOSE). Please refer to vignette of [DOSE](https://www.bioconductor.org/packages/DOSE) for more details.\n\n```{r warning=FALSE}\ndata(geneList, package=\"DOSE\")\ngene <- names(geneList)[abs(geneList) > 2]\ngene.df <- bitr(gene, fromType = \"ENTREZID\",\n\t   \ttoType = c(\"ENSEMBL\", \"SYMBOL\"),\n\t\tOrgDb = org.Hs.eg.db)\nhead(gene.df)\nggo <- groupGO(gene     = gene,\n               OrgDb    = org.Hs.eg.db,\n               ont      = \"CC\",\n               level    = 3,\n               readable = TRUE)\n\nhead(ggo)\n```\n\nThe input parameters of _gene_ is a vector of gene IDs (can be any ID type that supported by corresponding `OrgDb`).\n\nIf _readable_ is setting to _TRUE_, the input gene IDs will be converted to gene symbols.\n\n\n## GO over-representation test\n\n\nOver-representation test[@boyle2004] were implemented in [clusterProfiler](https://www.bioconductor.org/packages/clusterProfiler). For calculation details and explanation of paramters, please refer to the vignette of [DOSE](https://www.bioconductor.org/packages/DOSE).\n\n```{r}\nego <- enrichGO(gene          = gene,\n                universe      = names(geneList),\n                OrgDb         = org.Hs.eg.db,\n                ont           = \"CC\",\n                pAdjustMethod = \"BH\",\n                pvalueCutoff  = 0.01,\n                qvalueCutoff  = 0.05,\n\t\treadable      = TRUE)\nhead(ego)\n```\n\nAs I mentioned before, any gene ID type that supported in `OrgDb` can be directly used in GO analyses. User need to specify the `keyType` parameter to specify the input gene ID type.\n\n```{r eval=FALSE}\nego2 <- enrichGO(gene         = gene.df$ENSEMBL,\n                OrgDb         = org.Hs.eg.db,\n                keyType       = 'ENSEMBL',\n                ont           = \"CC\",\n                pAdjustMethod = \"BH\",\n                pvalueCutoff  = 0.01,\n                qvalueCutoff  = 0.05)\n```\n\nGene ID can be mapped to gene Symbol by using paramter `readable=TRUE` or `setReadable` function.\n```{r eval=FALSE}\nego2 <- setReadable(ego2, OrgDb = org.Hs.eg.db)\n```\n\n### drop specific GO terms or level\n\n`enrichGO` test the whole GO corpus and enriched result may contains very general terms. With `dropGO` function, user can remove specific GO terms or GO level from results obtained from both `enrichGO` and `compareCluster`.\n\n\n### test GO at sepcific level\n\n`enrichGO` doesn't contain parameter to restrict the test at specific GO level. Instead, we provide a function `gofilter` to restrict the result at specific GO level. It works with results obtained from both `enrichGO` and `compareCluster`.\n\n\n### reduce redundancy of enriched GO terms\n\nAccording to [issue #28](https://github.com/GuangchuangYu/clusterProfiler/issues/28), I implement a `simplify` method to remove redundant GO terms obtained from `enrichGO`. An example can be found in [the blog post](https://guangchuangyu.github.io/2015/10/use-simplify-to-remove-redundancy-of-enriched-go-terms/). It internally call [GOSemSim](https://www.bioconductor.org/packages/GOSemSim) to calculate similarities among GO terms and remove those highly similar terms by keeping one representative term. The `simplify` method also works with both outputs from `enrichGO` and `compareCluster`.\n\n\n## GO Gene Set Enrichment Analysis\n\nA common approach in analyzing gene expression profiles was identifying differential expressed genes that are deemed interesting. The enrichment analysis we demonstrated previous were based on these differential expressed genes. This approach will find genes where the difference is large, but it will not detect a situation where the difference is small, but evidenced in coordinated way in a set of related genes. Gene Set Enrichment Analysis (GSEA)[@subramanian_gene_2005] directly addresses this limitation. All genes can be used in GSEA; GSEA aggregates the per gene statistics across genes within a gene set, therefore making it possible to detect situations where all genes in a predefined set change in a small but coordinated way. Since it is likely that many relevant phenotypic differences are manifested by small but consistent changes in a set of genes.\n\nFor algorithm details, please refer to the vignette of [DOSE](https://www.bioconductor.org/packages/DOSE).\n\n```{r eval=FALSE}\nego3 <- gseGO(geneList     = geneList,\n              OrgDb        = org.Hs.eg.db,\n              ont          = \"CC\",\n              nPerm        = 1000,\n              minGSSize    = 100,\n              maxGSSize    = 500,\n              pvalueCutoff = 0.05,\n              verbose      = FALSE)\n```\n\nGSEA use permutation test, user can set _nPerm_ for number of permutations. Only gene Set size in `[minGSSize, maxGSSize]` will be tested.\n\n\nIf you have issues in preparing your own `geneList`, please refer to the [wiki\npage](https://github.com/GuangchuangYu/DOSE/wiki/how-to-prepare-your-own-geneList).\n\n\n## GO Semantic Similarity Analysis\n\nGO semantic similarity can be calculated by [GOSemSim](https://www.bioconductor.org/packages/GOSemSim)[@yu2010]. We can use it to cluster genes/proteins into different clusters based on their functional similarity and can also use it to measure the similarities among GO terms to reduce the redundancy of GO enrichment results.\n\n\n# KEGG analysis\n\nThe annotation package, `KEGG.db`, is not updated since 2012. It's now pretty old and in [clusterProfiler](https://www.bioconductor.org/packages/clusterProfiler), `enrichKEGG` (for KEGG pathway) and `enrichMKEGG` (for KEGG module) supports downloading latest online version of KEGG data for enrichment analysis. Using `KEGG.db` is also supported by explicitly setting _use\\_internal\\_data_ parameter to _TRUE_, but it's not recommended.\n\nWith this new feature, organism is not restricted to those supported in previous release, it can be any species that have KEGG annotation data available in KEGG database. User should pass abbreviation of academic name to the _organism_ parameter. The full list of KEGG supported organisms can be accessed via [http://www.genome.jp/kegg/catalog/org_list.html](http://www.genome.jp/kegg/catalog/org_list.html).\n\n[clusterProfiler](https://www.bioconductor.org/packages/clusterProfiler) provides `search_kegg_organism()` function to help searching supported organisms.\n\n```{r}\nsearch_kegg_organism('ece', by='kegg_code')\necoli <- search_kegg_organism('Escherichia coli', by='scientific_name')\ndim(ecoli)\nhead(ecoli)\n```\n\n\n## KEGG over-representation test\n\n\n```{r}\nkk <- enrichKEGG(gene         = gene,\n                 organism     = 'hsa',\n                 pvalueCutoff = 0.05)\nhead(kk)\n```\n\nInput ID type can be `kegg`, `ncbi-geneid`, `ncbi-proteinid` or `uniprot`, an example can be found in [the post](https://guangchuangyu.github.io/2016/05/convert-biological-id-with-kegg-api-using-clusterprofiler/).\n\n\n## KEGG Gene Set Enrichment Analysis\n\n```{r}\nkk2 <- gseKEGG(geneList     = geneList,\n               organism     = 'hsa',\n               nPerm        = 1000,\n               minGSSize    = 120,\n               pvalueCutoff = 0.05,\n               verbose      = FALSE)\nhead(kk2)\n```\n\n\n\n## KEGG Module over-representation test\n\n[KEGG Module](http://www.genome.jp/kegg/module.html) is a collection of manually defined function units. In some situation, KEGG Modules have a more straightforward interpretation.\n\n```{r eval = FALSE}\nmkk <- enrichMKEGG(gene = gene,\n                   organism = 'hsa')\n```\n\n## KEGG Module Gene Set Enrichment Analysis\n\n```{r eval=FALSE}\nmkk2 <- gseMKEGG(geneList = geneList,\n                 species = 'hsa')\n```\n\n\n# Disease analysis\n\n[DOSE](https://www.bioconductor.org/packages/DOSE)[@yu_dose_2015] supports Disease Ontology (DO) Semantic and Enrichment analysis. The `enrichDO` function is very useful for identifying disease association of interesting genes, and function `gseDO` function is designed for gene set enrichment analysis of _DO_.\n\nIn addition, [DOSE](https://www.bioconductor.org/packages/DOSE) also supports enrichment analysis of [Network of Cancer Gene](http://ncg.kcl.ac.uk/) (NCG)[@omer_ncg] and [Disease Gene Network](http://disgenet.org/)[@janet_disgenet], please refer to the [DOSE](https://www.bioconductor.org/packages/DOSE) vignettes.\n\n\n# Reactome pathway analysis\n\n[ReactomePA](https://www.bioconductor.org/packages/ReactomePA)[@yu_reactomepa_2016] uses Reactome as a source of pathway data. The function call of `enrichPathway` and `gsePathway` in [ReactomePA](https://www.bioconductor.org/packages/ReactomePA) is consistent with `enrichKEGG` and `gseKEGG`.\n\n\n# DAVID functional analysis\n\n[clusterProfiler](https://www.bioconductor.org/packages/clusterProfiler) provides enrichment and GSEA analysis with GO, KEGG, DO and Reactome pathway supported internally, some user may prefer GO and KEGG analysis with DAVID[@huang_david_2007] and still attracted by the visualization methods provided by [clusterProfiler](https://www.bioconductor.org/packages/clusterProfiler)[@paranjpe_genome_wid_2013]. To bridge the gap between DAVID and clusterProfiler, we implemented `enrichDAVID`. This function query enrichment analysis result from DAVID webserver via [RDAVIDWebService](https://www.bioconductor.org/packages/RDAVIDWebService)[@fresno_rdavidwebservice_2013] and stored the result as an `enrichResult` instance, so that we can use all the visualization functions in [clusterProfiler](https://www.bioconductor.org/packages/clusterProfiler) to visualize DAVID results. `enrichDAVID` is fully compatible with `compareCluster` function and comparing enrichment results from different gene clusters is now available with DAVID.\n\n```{r eval=FALSE}\ndavid <- enrichDAVID(gene = gene,\n                     idType = \"ENTREZ_GENE_ID\",\n                     listType = \"Gene\",\n                     annotation = \"KEGG_PATHWAY\",\n                     david.user = \"clusterProfiler@hku.hk\")\n```\n\nDAVID Web Service has the following limitations:\n\n+ A job with more than 3000 genes to generate gene or term cluster report will not be handled by DAVID due to resource limit.\n+ No more than 200 jobs in a day from one user or computer.\n+ DAVID Team reserves right to suspend any improper uses of the web service without notice.\n\nFor more details, please refer to [http://david.abcc.ncifcrf.gov/content.jsp?file=WS.html](http://david.abcc.ncifcrf.gov/content.jsp?file=WS.html).\n\nAs user has limited usage, please [register](http://david.abcc.ncifcrf.gov/webservice/register.htm) and use your own user account to run `enrichDAVID`.\n\n# Universal enrichment analysis\n\n[clusterProfiler](https://www.bioconductor.org/packages/clusterProfiler) supports both hypergeometric test and gene set enrichment analyses of many ontology/pathway, but it's still not enough for users may want to analyze their data with unsupported organisms, slim version of GO, novel functional annotation (e.g. GO via BlastGO or KEGG via KAAS), unsupported ontologies/pathways or customized annotations.\n\n[clusterProfiler](https://www.bioconductor.org/packages/clusterProfiler) provides `enricher` function for hypergeometric test and `GSEA` function for gene set enrichment analysis that are designed to accept user defined annotation. They accept two additional parameters _TERM2GENE_ and _TERM2NAME_. As indicated in the parameter names, _TERM2GENE_ is a data.frame with first column of term ID and second column of corresponding mapped gene and _TERM2NAME_ is a data.frame with first column of term ID and second column of corresponding term name. _TERM2NAME_ is optional.\n\nAn example of using `enricher` and `GSEA` to analyze [DisGeNet](http://www.disgenet.org/web/DisGeNET/menu/home) annotation is presented in the post, [use clusterProfiler as an universal enrichment analysis tool](http://guangchuangyu.github.io/2015/05/use-clusterprofiler-as-an-universal-enrichment-analysis-tool/).\n\n## Using MSigDB gene set collections\n\nThe MSigDB is a collection of annotated gene sets, it include 8 major collections:\n\n* H:  hallmark gene sets\n* C1: positional gene sets\n* C2: curated gene sets\n* C3: motif gene sets\n* C4: computational gene sets\n* C5: GO gene sets\n* C6: oncogenic signatures\n* C7: immunologic signatures\n\n\nUsers can use `enricher` and `GSEA` function to analyze gene set collections downloaded from Molecular Signatures Database ([MSigDb](http://www.broadinstitute.org/gsea/msigdb/index.jsp)). [clusterProfiler](https://www.bioconductor.org/packages/clusterProfiler) provides a function, `read.gmt`, to parse the [gmt file](www.broadinstitute.org/cancer/software/gsea/wiki/index.php/Data_formats#GMT:_Gene_Matrix_Transposed_file_format_.28.2A.gmt.29) into a _TERM2GENE_ `data.frame` that is ready for both `enricher` and `GSEA` functions.\n\n```{r}\ngmtfile <- system.file(\"extdata\", \"c5.cc.v5.0.entrez.gmt\", package=\"clusterProfiler\")\nc5 <- read.gmt(gmtfile)\n\negmt <- enricher(gene, TERM2GENE=c5)\nhead(egmt)\n\negmt2 <- GSEA(geneList, TERM2GENE=c5, verbose=FALSE)\nhead(egmt2)\n```\n\n# Functional analysis of NGS data\n\nFunctional analysis using NGS data (eg, RNA-Seq and ChIP-Seq) can be performed by linking coding and non-coding regions to coding genes via [ChIPseeker](https://www.bioconductor.org/packages/ChIPseeker)[@yu_chipseeker_2015] package, which can annotates genomic regions to their nearest genes, host genes, and flanking genes respectivly. In addtion, it provides a function, `seq2gene`, that simultaneously considering host genes, promoter region and flanking gene from intergenic region that may under control via cis-regulation. This function maps genomic regions to genes in a many-to-many manner and facilitate functional analysis. For more details, please refer to [ChIPseeker](https://www.bioconductor.org/packages/ChIPseeker).\n\n\n# Visualization\n\nThe function calls of `groupGO`, `enrichGO`, `enrichKEGG`, `enrichDO`, `enrichPathway` and `enricher` are consistent and all the output can be visualized by bar plot, enrichment map and category-gene-network plot. It is very common to visualize the enrichment result in bar or pie chart. We believe the pie chart is misleading and only provide bar chart.\n\n## barplot\n\n```{r fig.height=5, fig.width=9}\nbarplot(ggo, drop=TRUE, showCategory=12)\n```\n\n\n```{r fig.height=5, fig.width=8}\nbarplot(ego, showCategory=8)\n```\n\n## dotplot\n\n\n[dotplot](http://guangchuangyu.github.io/2015/06/dotplot-for-enrichment-result/) is a good alternative to `barplot`.\n\n```{r}\ndotplot(ego)\n```\n\n## emapplot\n\nEnrichment map can be viusalized by `emapplot`, which also support results obtained from hypergeometric test and gene set enrichment analysis.\n```{r fig.cap=\"enrichment map of enrichment result\", fig.align=\"center\", fig.height=8, fig.width=8}\nemapplot(ego)\n```\n\n## cnetplot\n\nIn order to consider the potentially biological complexities in which a gene may belong to multiple annotation categories and provide information of numeric changes if available, we developed `cnetplot` function to extract the complex association.\n\n```{r fig.height=8, fig.width=8}\n## categorySize can be scaled by 'pvalue' or 'geneNum'\ncnetplot(ego, categorySize=\"pvalue\", foldChange=geneList)\n```\n\n\n\n## goplot\n\n`goplot` can accept output of `enrichGO` and visualized the enriched GO induced graph.\n\n```{r fig.height=12, fig.width=8, eval=FALSE}\ngoplot(ego)\n```\n\n## gseaplot\n\nRunning score of gene set enrichment analysis and its association of phenotype can be visualized by `gseaplot`.\n\n```{r fig.cap=\"plotting gsea result\", fig.align=\"center\", fig.height=6, fig.width=8}\ngseaplot(kk2, geneSetID = \"hsa04145\")\n```\n\n## browseKEGG\n\nTo view the KEGG pathway, user can use `browseKEGG` function, which will open web browser and highlight enriched genes.\n\n```{r eval=FALSE}\nbrowseKEGG(kk, 'hsa04110')\n```\n\n![](figures/browseKEGG.png)\n\n\n\n## pathview from pathview package\n\n[clusterProfiler](https://www.bioconductor.org/packages/clusterProfiler) users can also use `pathview` from the [pathview](https://www.bioconductor.org/packages/pathview)[@luo_pathview] to visualize KEGG pathway.\n\nThe following example illustrate how to visualize \"hsa04110\" pathway, which was enriched in our previous analysis.\n\n```{r eval=FALSE}\nlibrary(\"pathview\")\nhsa04110 <- pathview(gene.data  = geneList,\n                     pathway.id = \"hsa04110\",\n                     species    = \"hsa\",\n                     limit      = list(gene=max(abs(geneList)), cpd=1))\n```\n![](figures/hsa04110_pathview.png)\n\nFor further information, please refer to the vignette of [pathview](https://www.bioconductor.org/packages/pathview)[@luo_pathview].\n\n\n\n# Biological theme comparison\n\n[clusterProfiler](https://www.bioconductor.org/packages/clusterProfiler) was developed for biological theme comparison[@yu2012], and it provides a function, `compareCluster`, to automatically calculate enriched functional categories of each gene clusters.\n\n```{r}\ndata(gcSample)\nlapply(gcSample, head)\n```\n\nThe input for _geneCluster_ parameter should be a named list of gene IDs. To speed up the compilation of this document, we set `use_internal_data = TRUE`.\n\n```{r}\nck <- compareCluster(geneCluster = gcSample, fun = \"enrichKEGG\")\nhead(as.data.frame(ck))\n```\n\n\n## Formula interface of compareCluster\n\n`compareCluster` also supports passing a formula (the code to support formula has been contributed by Giovanni Dall'Olio) of type $Entrez \\sim group$ or $Entrez \\sim group + othergroup$.\n\n```{r}\nmydf <- data.frame(Entrez=names(geneList), FC=geneList)\nmydf <- mydf[abs(mydf$FC) > 1,]\nmydf$group <- \"upregulated\"\nmydf$group[mydf$FC < 0] <- \"downregulated\"\nmydf$othergroup <- \"A\"\nmydf$othergroup[abs(mydf$FC) > 2] <- \"B\"\n\nformula_res <- compareCluster(Entrez~group+othergroup, data=mydf, fun=\"enrichKEGG\")\n\nhead(as.data.frame(formula_res))\n```\n\n## Visualization of profile comparison\n\nWe can visualize the result using `dotplot` method.\n\n```{r fig.height=7, fig.width=9}\ndotplot(ck)\n```\n\n```{r fig.height=6, fig.width=10}\ndotplot(formula_res)\ndotplot(formula_res, x=~group) + ggplot2::facet_grid(~othergroup)\n```\n\n\nBy default, only top 5 (most significant) categories of each cluster\nwas plotted. User can changes the parameter _showCategory_ to\nspecify how many categories of each cluster to be plotted, and if\n_showCategory_ was set to _NULL_, the whole result will\nbe plotted.\n\nThe _plot_ function accepts a parameter _by_ for setting the scale of dot sizes. The default parameter _by_ is setting to \"geneRatio\", which corresponding to the \"GeneRatio\" column of the output. If it was setting to _count_, the comparison will be based on gene counts, while if setting to _rowPercentage_, the dot sizes will be normalized by _count/(sum of each row)_\n\nTo provide the full information, we also provide number of identified genes in each category (numbers in parentheses) when _by_ is setting to _rowPercentage_ and number of gene clusters in each cluster label (numbers in parentheses) when _by_ is setting to _geneRatio_, as shown in Figure 3. If the dot sizes were based on _count_, the row numbers will not shown.\n\nThe p-values indicate that which categories are more likely to have biological meanings. The dots in the plot are color-coded based on their corresponding p-values. Color gradient ranging from red to blue correspond to in order of increasing p-values. That is, red indicate low p-values (high enrichment), and blue indicate high p-values (low enrichment). P-values and adjusted p-values were filtered out by the threshold giving by\nparameter _pvalueCutoff_, and FDR can be estimated by _qvalue_.\n\nUser can refer to the example in Yu (2012)[@yu2012]; we analyzed the publicly available expression dataset of breast tumour tissues from 200 patients (GSE11121, Gene Expression Omnibus)[@schmidt2008]. We identified 8 gene clusters from differentially expressed genes, and using `compareCluster` to compare these gene clusters by their enriched biological process.\n\nThe comparison function was designed as a framework for comparing gene\nclusters of any kind of ontology associations, not only `groupGO`,\n`enrichGO`, `enrichKEGG` and `enricher` provided in this package, but\nalso other biological and biomedical ontologies, for instance,\n`enrichDO` from [DOSE](https://www.bioconductor.org/packages/DOSE)[@yu_dose_2015], `enrichMeSH` from\n[meshes](https://www.bioconductor.org/packages/meshes) and `enrichPathway` from [ReactomePA](https://www.bioconductor.org/packages/ReactomePA) work fine with `compareCluster` for comparing biological themes in disease and reactome pathway perspective. More details can be found in the vignettes of [DOSE](https://www.bioconductor.org/packages/DOSE)[@yu_dose_2015] and [ReactomePA](https://www.bioconductor.org/packages/ReactomePA).\n\n\n# Need helps?\n\n\nIf you have questions/issues, please visit\n[clusterProfiler homepage](https://guangchuangyu.github.io/software/clusterProfiler/) first.\nYour problems are mostly documented. If you think you found a bug, please follow\n[the guide](https://guangchuangyu.github.io/2016/07/how-to-bug-author/) and\nprovide a reproducible example to be posted\non\n[github issue tracker](https://github.com/GuangchuangYu/clusterProfiler/issues).\nFor questions, please post\nto [Bioconductor support site](https://support.bioconductor.org/) and tag your\npost with *clusterProfiler*.\n\n\nFor Chinese user, you can follow me on [WeChat (微信)](https://guangchuangyu.github.io/blog_images/biobabble.jpg).\n\n# Session Information\n\nHere is the output of `sessionInfo()` on the system on which this document was compiled:\n\n```{r echo=FALSE}\nsessionInfo()\n```\n\n# References\n\n",
    "created" : 1526981625773.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "707768478",
    "id" : "D54AD2C7",
    "lastKnownWriteTime" : 1526893609,
    "last_content_update" : 1526983196755,
    "path" : "C:/RFactory/clusterProfiler/vignettes/clusterProfiler.Rmd",
    "project_path" : "vignettes/clusterProfiler.Rmd",
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}