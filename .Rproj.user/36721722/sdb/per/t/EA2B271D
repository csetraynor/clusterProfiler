{
    "collab_server" : "",
    "contents" : "dotplot.compareClusterResult <- function(object, x=~Cluster, colorBy=\"p.adjust\", showCategory=5, by=\"geneRatio\",\n                                         split=NULL, includeAll=TRUE, font.size=12, title=\"\") {\n\n    df <- fortify(object, showCategory=showCategory, by=by, includeAll=includeAll, split=split)\n    plotting.clusterProfile(df, x=x, type=\"dot\", colorBy=colorBy, by=by, title=title, font.size=font.size)\n}\n\n##' convert compareClusterResult to a data.frame that ready for plot\n##'\n##'\n##' @rdname fortify\n##' @title fortify\n##' @param model compareClusterResult object\n##' @param data not use here\n##' @param showCategory category numbers\n##' @param by one of geneRatio, Percentage or count\n##' @param split ONTOLOGY or NULL\n##' @param includeAll logical\n##' @return data.frame\n##' @importFrom ggplot2 fortify\n##' @importFrom plyr ddply\n##' @importFrom plyr mdply\n##' @importFrom plyr .\n##' @method fortify compareClusterResult\n##' @export\n##' @author Guangchuang Yu\nfortify.compareClusterResult <- function(model, data, showCategory=5, by=\"geneRatio\",\n                                         split=NULL, includeAll=TRUE) {\n    clProf.df <- as.data.frame(model)\n    .split <- split\n\n    ## get top 5 (default) categories of each gene cluster.\n    if (is.null(showCategory)) {\n        result <- clProf.df\n    } else {\n        Cluster <- NULL # to satisfy codetools\n\n        topN <- function(res, showCategory) {\n            ddply(.data = res,\n                  .variables = .(Cluster),\n                  .fun = function(df, N) {\n                      if (length(df$Count) > N) {\n                          if (any(colnames(df) == \"pvalue\")) {\n                              idx <- order(df$pvalue, decreasing=FALSE)[1:N]\n                          } else {\n                              ## for groupGO\n                              idx <- order(df$Count, decreasing=T)[1:N]\n                          }\n                          return(df[idx,])\n                      } else {\n                          return(df)\n                      }\n                  },\n                  N=showCategory\n                  )\n\n        }\n\n        if (!is.null(.split) && .split %in% colnames(clProf.df)) {\n            lres <- split(clProf.df, as.character(clProf.df[, .split]))\n            lres <- lapply(lres, topN, showCategory = showCategory)\n            result <- do.call('rbind', lres)\n        } else {\n            result <- topN(clProf.df, showCategory)\n        }\n\n    }\n\n    ID <- NULL\n    if (includeAll == TRUE) {\n        result = subset(clProf.df, ID %in% result$ID)\n    }\n\n    ## remove zero count\n    result$Description <- as.character(result$Description) ## un-factor\n    GOlevel <- result[,c(\"ID\", \"Description\")] ## GO ID and Term\n    GOlevel <- unique(GOlevel)\n\n    result <- result[result$Count != 0, ]\n    result$Description <- factor(result$Description,\n                                 levels=rev(GOlevel[,2]))\n\n\n    if (by==\"rowPercentage\") {\n        Description <- Count <- NULL # to satisfy codetools\n        result <- ddply(result,\n                        .(Description),\n                        transform,\n                        Percentage = Count/sum(Count),\n                        Total = sum(Count))\n\n        ## label GO Description with gene counts.\n        x <- mdply(result[, c(\"Description\", \"Total\")], paste, sep=\" (\")\n        y <- sapply(x[,3], paste, \")\", sep=\"\")\n        result$Description <- y\n\n        ## restore the original order of GO Description\n        xx <- result[,c(2,3)]\n        xx <- unique(xx)\n        rownames(xx) <- xx[,1]\n        Termlevel <- xx[as.character(GOlevel[,1]),2]\n\n        ##drop the *Total* column\n        result <- result[, colnames(result) != \"Total\"]\n\n        result$Description <- factor(result$Description,\n                                     levels=rev(Termlevel))\n\n    } else if (by == \"count\") {\n        ## nothing\n    } else if (by == \"geneRatio\") {\n        gsize <- as.numeric(sub(\"/\\\\d+$\", \"\", as.character(result$GeneRatio)))\n        gcsize <- as.numeric(sub(\"^\\\\d+/\", \"\", as.character(result$GeneRatio)))\n        result$GeneRatio = gsize/gcsize\n        cluster <- paste(as.character(result$Cluster),\"\\n\", \"(\", gcsize, \")\", sep=\"\")\n        lv <- unique(cluster)[order(as.numeric(unique(result$Cluster)))]\n        result$Cluster <- factor(cluster, levels = lv)\n    } else {\n        ## nothing\n    }\n    return(result)\n}\n",
    "created" : 1526893718387.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "411054162",
    "id" : "EA2B271D",
    "lastKnownWriteTime" : 1526893609,
    "last_content_update" : 1526893609,
    "path" : "C:/RFactory/clusterProfiler/R/dotplot.R",
    "project_path" : "R/dotplot.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}